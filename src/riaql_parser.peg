query <- 'SELECT' space+ select_clause space+ 'FROM' space+ from_clause
space* ('WHERE' space+ where_clause)?
`
[_,_,Select,_,_,_,From,_|Rest]=Node,
case Rest of
    [[]] -> {From, Select};
    _ ->
        [[_, _, Where]] = Rest,
        {From, Select, Where}
end
`;

select_clause <- '*' / ((keymap / key) (',' space (keymap / key))*)
`
case Node of
    <<"*">> ->
        Node;
    [Key,[]] ->
        [Key];
    [Key1,List] ->
        [Key1|[KeyN || [_,_,KeyN] <- List]]
end
`;

from_clause <- function / name ~;

where_clause <- expr ((',' / (space 'AND' space)) space? expr)*
`
[Where1|Rest]=Node,
case Rest of
    [[]] -> [Where1];
    _ -> [Where1|[WhereN || [[_,_,WhereN]] <- Rest]]
end
`;

function <- name '(' value (',' space* value)* ')'
`
[Name,_,Val1,Vals,_]=Node,
apply(riaql, binary_to_atom(Name, utf8), [Val1|[ValN || [_,_,ValN] <- Vals]])
`;

expr <- name space? '=' space? value
`
[Key,_,_,_,Value]=Node,
{Key, fun(Val) -> Val =:= Value end}
`;

value <- string / number ~;

string <- '"' chars:(!'"' ("\\\\" / '\\"' / .))* '"' `iolist_to_binary(proplists:get_value(chars, Node))`;
number <- float / int ~;

key <- name
`
{Node,Node}
`;
keymap <- name space? '=' space? name
`
[NewKey,_,_,_,OldKey]=Node,
{NewKey,OldKey}
`;

name <- [A-z] ([A-z] / [0-9])*
`
iolist_to_binary(Node)
`;

int <- '-'? non_zero_digit digit*
`
list_to_integer(binary_to_list(iolist_to_binary(Node)))
`;
float <- int '.' digit+
`
list_to_float(binary_to_list(iolist_to_binary(Node)))
`;
non_zero_digit <- [1-9] ~;
digit <- [0-9] ~;
space <- [ \t\n\s\r] ~;
